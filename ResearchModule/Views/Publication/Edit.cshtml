@using ResearchModule.Components
@using Microsoft.AspNetCore.Html
@inject ResearchModule.Service.SelectListService SelectListService
@model ResearchModule.Models.Publication

@{
    
    if (Model == null)
    {
        return;
    }
    // наличие перевода
    var isTranslate = Model.TranslateText != null;
    var formId = "editPublication";
    var name = "Publication.";
    //TODO: Убрать Label. Ужасно смотрится
}

@{
    IHtmlContent Render<T>(Func<T, IHtmlContent> helper, T item = default(T)) =>
    helper(item);

    Func<object, IHtmlContent> CustomCreate(string names, IHtmlContent value, IHtmlContent click) =>
    (@<text>
        <div class="col-md-4">@(names)</div>
        <div class="col-md-8">
            <div class="input-group">
                @value
                <span class="input-group-btn">
                    @click
                </span>
            </div>
        </div>
        </text>);
}

@using (Html.BeginForm("Create", "Publication", FormMethod.Post, new { id = formId, enctype = "multipart/form-data" }))
{
    <div>
        <div class="row">
            <div class="col-md-4">@Html.LabelFor(m => m.PublicationName)</div>
            <div class="col-md-8">
                @Html.TextBox(name + "PublicationName", Model.PublicationName, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.CheckBox("IsTranslate", isTranslate, new { onClick = "clickIsTarslate(this)" }) Иностранный язык
            </div>
        </div>
        <div class="row" id="translate_Publication" style="display: @( isTranslate ? "" : "none")">
            <div class="col-md-4">Перевод названия</div>
            <div class="col-md-8">
                @Html.TextBox(name + "TranslateText", Model.TranslateText, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">Раздел</div>
            <div class="col-md-8" id="load_select-Section">
                @Html.SelectList(SelectListService.LoadSelectPublicationPartition(Model.PublicationPartition))
            </div>
        </div>
        <div class="row">
            @Render(CustomCreate("Вид публикации", Html.SelectList(SelectListService.LoadSelectPublicationType(Model.PublicationType)),
            Html.Button("CreateTP", "", Html.Icon("plus"), new { type = "button", onClick = "PublicationTypes.create()" })))
        </div>
        <div class="row CreateTypePublication">
        </div>
        <div class="row">
            <div class="col-md-4">Форма работы</div>
            <div class="col-md-8" id="load_select-PublicationForm">
                @Html.SelectList(SelectListService.LoadSelectPublicationForm(Model.PublicationForm))
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">Издательство</div>
            <div class="col-md-8">
                @Html.TextArea(name + "OutputData", Model.OutputData ?? "", new { @class = "form-control", rows = "5", style = "max-width: 100%;" })
            </div>
        </div>
        <div class="row VolumeCreate">
            <div class="col-md-4">Объем</div>
            <div class="col-md-8">
                @Html.TextBox(name + "Volume", Model.Volume , new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                Файл
            </div>
            <div class="col-md-8">
                @Html.File("FormFile")
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                Автор
            </div>
            <div class="col-md-8">
                @Html.Button("CreateAuthors", " Создать", Html.Icon("plus"), new { onClick = string.Format("Author.append('{0}')", Url.Action("CreateForm", "Author")), type = "button" })
                @Html.Button("SearchAuthors", " Найти", Html.Icon("search"),
                          new Dictionary<string, object> { { "type", "button" }, { "data-toggle", "modal" }, { "data-target", "#SearchAuthorsModal" } })
            </div>
        </div>
        <div class="SelectedAuthors">

        </div>
        <div style="margin-top: 10px;">
            @Html.Partial("CreateListOfAuthors", Model.Id)
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.Button("Create", "Сохранить", null, new { type = "button", @class = "btn btn-success", onClick = string.Format("formSubmit('{0}')", formId) })
            </div>
        </div>
    </div>
    @Html.Hidden(name + "PublicationFile", Model.PublicationFileName ?? "")
}

@Html.Partial("SearchAuthorModal")


<script type="text/javascript" src="~/js/publication.js"></script>
<script type="text/javascript">
    var timers = timers || [];
    timers[0] = 0;
    Author = function () {
        var resultauthorJson = [];
        var countAuthor = 0;
        let c = 0;
        let searchRes = "_SearchResult_SearchAuthorsModal";
        let select = "Selected";
        let add = "Additional";
        return {
            append: function (url) {
                $.ajax({
                type: 'POST',
                url: url+'?id=' + countAuthor,
                success: function (data) {
                    countAuthor++;
                    $("#createResult").append(data);
                }
                });
            },
            remove: function (name) {
                let id = "[id$='" + name + "']";
                $(id).detach();
            },
            search: function (elem) {
                return {
                    onKeyUp: function () {
                        if (elem.value === "") return;
                        clearTimeout(timers[0]);
                        Author.search(elem).start();
                    },
                    start: function () {
                        timers[0] = setTimeout(function () { Author.search(elem).onChange() }, 500);
                    },
                    onChange: function () {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Search", "Author")?character=' + elem.value,
                            success: function (data) {
                                $("#" + add + searchRes).html(data);
                            }
                        });
                    }
                }
            },
            searchResult: function () {
                return {
                    append: function (elem, id) {
                        let selector = "#AuthorItem_" + id;
                        if (elem.checked) {
                            let tr = $(selector).clone();
                            $("#" + select+searchRes).append(tr);
                        }
                        else {
                            $("[name='" + elem.name + "']").attr("checked", false);
                            $("#" + select + searchRes + " " + selector).detach();
                            // данные полученные при поиске
                            $("#searchResult " + selector).detach();
                            // исходные данные при наличии модели
                            $("#getResult " + selector).detach();
                        }
                    },
                    @*append_data @Html.TextBox("Author[00].Weight", "", new { @class = "form-control", placeHolder = "Вес" })*@
                    serialize: function () {
                        var searchResult = $("#searchResult").html($("#" + select + searchRes+" tr").clone());
                        searchResult.find("tr:has(td)").append(`<td>@Html.TextBox("Author[00].Weight", "", new { @class="form-control", placeHolder = "Вес" })</td>`);
                    }
                }
            }
        };
    }();
</script>
