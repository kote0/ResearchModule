@using ResearchModule.Components
@using Microsoft.AspNetCore.Html
@inject ResearchModule.Service.SelectListService SelectListService
@model ResearchModule.Models.Publication

@{

    if (Model == null)
    {
        return;
    }
    // наличие перевода
    var isTranslate = Model.TranslateText != null;
    var formId = "editPublication";
    var name = "Publication.";
    //TODO: Убрать Label. Ужасно смотрится
}

@{
    IHtmlContent Render<T>(Func<T, IHtmlContent> helper, T item = default(T)) =>
    helper(item);

    Func<object, IHtmlContent> CustomCreate(string names, IHtmlContent value, IHtmlContent click) =>
    (@<text>
        <div class="col-md-4">@(names)</div>
        <div class="col-md-8">
            <div class="input-group">
                @value
                <span class="input-group-btn">
                    @click
                </span>
            </div>
        </div>
        </text>);
}

@using (Html.BeginForm("Create", "Publication", FormMethod.Post, new { id = formId, enctype = "multipart/form-data" }))
{
    <div>
        <div class="row">
            <div class="col-md-4">@Html.LabelFor(m => m.PublicationName)</div>
            <div class="col-md-8">
                <req-input name="@(name + "PublicationName")" value="@Model.PublicationName"></req-input>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.CheckBox("IsTranslate", isTranslate, new { onClick = "clickIsTarslate(this)" }) Иностранный язык
            </div>
        </div>
        <div class="row" id="translate_Publication" style="display: @( isTranslate ? "" : "none")">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.TranslateText)</div>
            <div class="col-md-8">
                <req-input required="@isTranslate" name="@(name+ "TranslateText")" value="@Model.TranslateText"></req-input>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">Раздел</div>
            <div class="col-md-8" id="load_select-Section">
                <select-list items="@SelectListService.LoadSelectPublicationPartition(Model.PublicationPartition)"></select-list>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.PublicationType)</div>
            <div class="col-md-8">
                <input-group-btn 
                                 input="@Html.SelectList(SelectListService.LoadSelectPublicationType(Model.PublicationType))"
                                 button="@Html.Button("CreateTP", "", Html.Icon("plus"), new { type = "button", onClick = "PublicationTypes.create()" })">
                </input-group-btn>
            </div>
        </div>
        <div class="row CreateTypePublication">
        </div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.PublicationForm)</div>
            <div class="col-md-8" id="load_select-PublicationForm">
                <select-list items="@SelectListService.LoadSelectPublicationForm(Model.PublicationForm)"></select-list>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">Издательство</div>
            <div class="col-md-8">
                @Html.TextArea(name + "OutputData", Model.OutputData ?? "",
                   new Dictionary<string, object> {
                            { "class", "form-control" },
                            { "rows", 5 },
                            { "style", "max-width: 100%;" },
                            { "data-val", true },
                            { "data-val-required", "Заполните обязательное поле" }
                   })
            </div>
        </div>
        <div class="row" id="VolumeCreate">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.Volume)</div>
            <div class="col-md-8">
                <req-input name="@(name + "Volume")" value="@Model.Volume"></req-input>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                Файл
            </div>
            <div class="col-md-8">
                @Html.File("FormFile", Model.PublicationFileName)
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                Автор
            </div>
            <div class="col-md-8">
                @Html.Button("CreateAuthors", " Создать", Html.Icon("plus"), new { onClick = string.Format("Author.append('{0}')", Url.Action("CreateForm", "Author")), type = "button" })
                @Html.Button("SearchAuthors", " Найти", Html.Icon("search"),
                          new Dictionary<string, object> { { "type", "button" }, { "data-toggle", "modal" }, { "data-target", "#SearchAuthorsModal" } })
            </div>
        </div>
        <div class="SelectedAuthors">

        </div>
        <div style="margin-top: 10px;">
            @Html.Partial("CreateListOfAuthors", Model.Id)
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.Button("Create", "Сохранить", null, new { type = "button", @class = "btn btn-success", onClick = string.Format("formSubmit('{0}')", formId) })
            </div>
        </div>
    </div>
    @Html.Hidden(name + "PublicationFile", Model.PublicationFileName ?? "")
}

@Html.Partial("SearchAuthorModal")


<script type="text/javascript" src="~/js/publication.js"></script>
<script type="text/javascript">

</script>
