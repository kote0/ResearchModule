@using ResearchModule.Components
@using Microsoft.AspNetCore.Html
@inject ResearchModule.Service.SelectListService SelectListService
@model ResearchModule.Models.Publication

@{
    // наличие перевода
    var isTranslate = false;//Model.TranslateText != null;
    var formId = "editPublication";
    var name = "Publication.";
    if (Model == null)
    {
        return;
    }
    //TODO: Убрать Label. Ужасно смотрится
}

@{
    IHtmlContent Render<T>(Func<T, IHtmlContent> helper, T item = default(T)) =>
    helper(item);

    Func<object, IHtmlContent> CustomCreate(string names, IHtmlContent value, IHtmlContent click) =>
    (@<text>
        <div class="col-md-4">@Html.Label(names)</div>
        <div class="col-md-8">
            <div class="input-group">
                @value
                <span class="input-group-btn">
                    @click
                </span>
            </div>
        </div>
        </text>);
}

@using (Html.BeginForm("Create", "Publication", FormMethod.Post, new { id = formId, enctype = "multipart/form-data" }))
{
    <div>
        <div class="row">
            <div class="col-md-4">
                @Html.Label("Название публикации")
            </div>
            <div class="col-md-8">
                @Html.TextBox(name + "PublicationName", Model.PublicationName, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.CheckBox("IsTranslate", isTranslate, new { onClick = "clickIsTarslate(this)" }) Иностранный язык
            </div>
        </div>
        @if (!isTranslate)
        {
            <div class="row Translate">
                <div class="col-md-4">
                    @Html.Label("Перевод названия")
                </div>
                <div class="col-md-8">
                    @Html.TextBox(name + "TranslateText", Model.TranslateText, new { @class = "form-control" })
                </div>
            </div>
        }
        <div class="row">
            <div class="col-md-4">
                @Html.Label("Раздел")
            </div>
            <div class="col-md-8" id="load_select-Section">
                @Html.SelectList(SelectListService.LoadSelectPublicationPartition(Model.PublicationPartition))
            </div>
        </div>
        <div class="row">
            @Render(CustomCreate("Вид публикации", Html.SelectList(SelectListService.LoadSelectPublicationType(Model.PublicationType)),
            Html.Button("CreateTP", "", Html.Icon("plus"), new { type = "button", onClick = "PublicationTypes.create()" })))
        </div>
        <div class="row CreateTypePublication">
        </div>
        <div class="row">
            <div class="col-md-4">
                @Html.Label("Форма работы")
            </div>
            <div class="col-md-8" id="load_select-PublicationForm">
                @Html.SelectList(SelectListService.LoadSelectPublicationForm(Model.PublicationForm))
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                @Html.Label("Издательство")
            </div>
            <div class="col-md-8">
                //указать размеры, чтобы не было проблем при расширении
                @Html.TextArea(name + "OutputData", Model.OutputData ?? "", new { @class = "form-control", rows = "5", style = "max-width: 100%;" })
            </div>
        </div>
        <div class="row VolumeCreate">
            <div class="col-md-4">
                @Html.Label("Объем")
            </div>
            <div class="col-md-8">

                @Html.TextBox(name + "Volume", Model.Volume , new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                Файл
            </div>
            <div class="col-md-8">
                @Html.File("FormFile")
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                @Html.Label("Автор")
            </div>
            <div class="col-md-8">
                @Html.Button("CreateAuthors", " Создать", Html.Icon("plus"), new { onClick = "Author.append()", type = "button" })
                @Html.Button("SearchAuthors", " Найти", Html.Icon("search"),
                          new Dictionary<string, object> { { "type", "button" }, { "data-toggle", "modal" }, { "data-target", "#SearchAuthorsModal" } })
            </div>
        </div>
        <div class="SelectedAuthors">

        </div>
        <div style="margin-top: 10px;">
            @Html.Partial("CreateListOfAuthors", Model.Id)
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.Button("Create", "Сохранить", null, new { type = "button", @class = "btn btn-success", onClick = "formSubmit()" })
            </div>
        </div>
    </div>
    @Html.Hidden(name + "PublicationFile", Model.PublicationFileName ?? "")
}

@Html.Partial("SearchAuthorModal")



<script type="text/javascript">
    $(function() {

  // We can attach the `fileselect` event to all file inputs on the page
        $(document).on('change', ':file', function () {
            debugger;
    var input = $(this),
        numFiles = input.get(0).files ? input.get(0).files.length : 1,
        label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
    input.trigger('fileselect', [numFiles, label]);
  });

  // We can watch for our custom `fileselect` event like this
        $(document).ready(function () {
            debugger;
      $(':file').on('fileselect', function(event, numFiles, label) {

          var input = $(this).parents('.input-group').find(':text'),
              log = numFiles > 1 ? numFiles + ' files selected' : label;

          if( input.length ) {
              input.val(log);
          } else {
              if( log ) alert(log);
          }

      });
  });

});



    //конвертирование листа на корректные номера
    function convertName(list) {
        let countItem = -1;
        let id;
        for (var item of list) {
            let name = item.name.match(/\d/g)[0];
            if (id != name) {
                id = name;
                countItem++;
            }
            $("[name='" + item.name + "']").attr("name", item.name.replace(/\d/g, countItem));

        }
    }

    // обработка перед submit
    function formSubmit(){
        var searchResult = $("#searchResult").find("[type=hidden], input:checked");
        var createResult = $("#createResult").find("input");
        convertName(searchResult);
        convertName(createResult);
        $("#@(formId)").submit();
    }

    var timers = timers || [];
    timers[0] = 0;
    Author = function () {
        var resultauthorJson = [];
        var countAuthor = 0;
        let c = 0;
        let searchRes = "_SearchResult_SearchAuthorsModal";
        let select = "Selected";
        let add = "Additional";
        return {
            append: function () {
                $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateForm", "Author")?id=' + countAuthor,
                success: function (data) {
                    countAuthor++;
                    $("#createResult").append(data);
                }
                });
            },
            remove: function (cardName) {
                let cardId = "[id$='" + cardName + "']";
                $(cardId).detach();
            },
            search: function (elem) {
                return {
                    onKeyUp: function () {
                        if (elem.value === "") return;
                        clearTimeout(timers[0]);
                        Author.search(elem).start();
                    },
                    start: function () {
                        timers[0] = setTimeout(function () { Author.search(elem).onChange() }, 500);
                    },
                    onChange: function () {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Search", "Author")?character=' + elem.value,
                            success: function (data) {
                                $("#" + add + searchRes).html(data);
                            }
                        });
                    }
                }
            },
            searchResult: function () {
                return {
                    append: function (elem, id) {
                        let selector = "#AuthorItem_" + id;
                        if (elem.checked) {
                            let tr = $(selector).clone();
                            $("#" + select+searchRes).append(tr);
                        }
                        else {
                            $("[name='" + elem.name + "']").attr("checked", false);
                            $("#" + select + searchRes + " " + selector).detach();
                            // данные полученные при поиске
                            $("#searchResult " + selector).detach();
                            // исходные данные при наличии модели
                            $("#getResult " + selector).detach();
                        }
                    },
                    serialize: function () {
                        var searchResult = $("#searchResult").html($("#" + select + searchRes+" tr").clone());
                        searchResult.find("tr:has(td)").append(`<td>@Html.TextBox("Author[00].Weight", "", new { @class="form-control", placeHolder = "Вес" })</td>`);
                    }
                }
            }
        };
    }();


    function clickIsTarslate(e) {
        let display;
        if (e.checked) {
            display = "";
        }
        else {
            display = "none";
        }
        $(".Translate").css("display", display);
    }

    PublicationTypes = function () {
        let name = "PublicationType";
        return {
            create: function () {
                let val =
                `@Render(CustomCreate(
                "Название вида",
                 Html.TextBox("PublicationType.Name", "", new { @class = "form-control ", placeholder = "Название вида" }),
                 Html.Button("Delete", "", Html.Icon("remove"), new { type = "button", onClick = "PublicationTypes.remove()"  })
                ))`;
                $(".CreateTypePublication").html(val);
                disable(".selectpicker_" + name, true);

            },
            remove: function () {
                $(".CreateTypePublication").empty();
                disable(".selectpicker_" + name, false);
            }
        };
    }();
</script>
