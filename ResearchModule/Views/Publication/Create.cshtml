@using ResearchModule.Components
@using Microsoft.AspNetCore.Html
@inject ResearchModule.Service.SelectListService SelectListService
@model ResearchModule.Models.Publication

@{
    var formId = "createPublication";
    var name = "Publication.";
}

@using (Html.BeginForm("Create", "Publication", FormMethod.Post, new { id = formId, enctype = "multipart/form-data" }))
{
    <div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m=>m.PublicationName)</div>
            <div class="col-md-8">
               <req-input name="@(name + "PublicationName")"></req-input>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.CheckBox("IsTranslate", false, new { onClick = "clickIsTarslate(this)" }) Иностранный язык
            </div>
        </div>
        <div class="row" id="translate_Publication" style="display: none;">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.TranslateText)</div>
            <div class="col-md-8">
                <req-input required="false" name="@(name+ "TranslateText")"></req-input>
            </div>
            <div class="col-md-4 after-row" >Научная работа на</div>
            <div class="col-md-8 after-row" id="languages"></div>
        </div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.PublicationPartition)</div>
            <div class="col-md-8" id="load_select-Section">
                <select-list items="@SelectListService.LoadSelectPublicationPartition()"></select-list>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m=>m.PublicationType)</div>
            <div class="col-md-8">
                <input-group-btn 
                                 input ="@Html.SelectList(SelectListService.LoadSelectPublicationType())"
                                 button="@Html.Button("CreateTP", "", Html.Icon("plus"), new { type = "button", onClick = "PublicationTypes.create()" })">
                </input-group-btn>
            </div>
        </div>
        <div class="row CreateTypePublication">
        </div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.PublicationForm)</div>
            <div class="col-md-8" id="load_select-PublicationForm">
                <select-list items="@SelectListService.LoadSelectPublicationForm()"></select-list>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.OutputData)</div>
            <div class="col-md-8">
                @Html.TextArea(name + "OutputData",
                    new Dictionary<string, object> {
                        { "class", "form-control" },
                        { "rows", 5 },
                        { "style", "max-width: 100%;" },
                        { "data-val", true },
                        { "data-val-required", "Заполните обязательное поле" }
                    })
            </div>
        </div>
        <div class="row" id="VolumeCreate">
            <div class="col-md-4">@Html.DisplayNameFor(m => m.Volume)</div>
            <div class="col-md-8">
                <req-input name="@(name + "Volume")"></req-input>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">Файл</div>
            <div class="col-md-8">
                @Html.File("FormFile")
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">Автор</div>
            <div class="col-md-8">
                @Html.Button("CreateAuthors", " Создать", Html.Icon("plus"), new { onClick = string.Format("Author.append('{0}')", Url.Action("CreateForm", "Author")), type = "button" })
                @Html.Button("SearchAuthors", " Найти", Html.Icon("search"),
                          new Dictionary<string, object> { { "type", "button" }, { "data-toggle", "modal" }, { "data-target", "#SearchAuthorsModal" } })
            </div>
        </div>
        <div class="SelectedAuthors">

        </div>
        <div style="margin-top: 10px;">
            @Html.Partial("CreateListOfAuthors")
        </div>
        <div class="row">
            <div class="col-md-4">
                @Html.Button("Create", "Сохранить", null, new { type = "button", @class = "btn btn-success", onClick = string.Format("formSubmit('{0}')",formId) })
            </div>
            <div class="col-md-8 info "></div>
        </div>
    </div>
}

@Html.Partial("SearchAuthorModal")


<!--<script type="text/javascript" src="~/js/publication.js"></script>-->
<script type="text/javascript" src="~/lib/languages/language.js"></script>
<script type="text/javascript" >
    Publication = {
        volumeShow: true // показывается ли объем
    };

    //конвертирование листа на корректные номера
    function convertName(list) {
        let countItem = -1;
        let id;
        for (var item of list) {
            let name = item.name.match(/\d/g)[0];
            if (id !== name) {
                id = name;
                countItem++;
            }
            $("[name='" + item.name + "']").attr("name", item.name.replace(/\d/g, countItem));

        }
        return countItem;
    }


    // обработка перед submit
    function formSubmit(formId) {
        debugger;
        if (!isValid()) {
            get_Info("Заполните обязательные поля");
            return;
        }
        var searchResult = $("#searchResult").find("[type=hidden], input:checked");
        var createResult = $("#createResult").find("input");
        let c = convertName(searchResult) + convertName(createResult);
        if (c === -2) {
            get_Info("Отстутствуют авторы");
            return;
        }
        $("#" + formId).submit();
    }

    function get_Info(text) {
        //$(".info").html(`<h3 style='margin-top:0;'><span class='label label-danger'>${text}</span></h3>`);
        $(".info").html(`<div class="alert alert-danger" role="alert">${text}</div>`);
    }


    function isValid() {
        let res = true;
        var reqInput = $("[data-val='True']");
        for (var input of reqInput) {
            let parent = $(input).parent();
            if (input.value === "") {
                parent.addClass("has-error")
                res = false;
            }
            else {
                parent.removeClass("has-error")
            }
        }
        return res;
    }




    function clickIsTarslate(e) {
        Requied("#Publication_TranslateText", e.checked);
        $("#translate_Publication").css("display", e.checked ? "" : "none");
    }

    PublicationTypes = function () {
        let name = "PublicationType";
        return {
            create: function () {
                let val =
                    `<div class="col-md-4">Название вида</div>
                    <div class="col-md-8">
                        <div class="input-group">
                            <input class="form-control " data-val="True" id="PublicationType_Name" name="PublicationType.Name" placeholder="Название вида" type="text" value="">
                            <span class="input-group-btn">
                                <button class="btn btn-default" id="Delete" onclick="PublicationTypes.remove()" type="button"><span class="glyphicon glyphicon-remove"></span></button>
                            </span>
                        </div>
                </div>`;
                $(".CreateTypePublication").html(val);
                disable(`[name='Publication.${name}']`, true);

            },
            remove: function () {
                $(".CreateTypePublication").empty();
                disable(`[name='Publication.${name}']`, false);
            }
        };
    }();


    var timers = timers || [];
    timers[0] = 0;
    Author = function () {
        var resultauthorJson = [];
        var countAuthor = 0;
        let c = 0;
        let searchRes = "_SearchResult_SearchAuthorsModal";
        let select = "Selected";
        let add = "Additional";
        return {
            append: function (url) {
                $.ajax({
                    type: 'POST',
                    url: url + '?id=' + countAuthor,
                    success: function (data) {
                        countAuthor++;
                        $("#createResult").append(data);
                        showWeight(Publication.volumeShow);
                    }
                });
            },
            remove: function (cardName) {
                let cardId = "[id$='" + cardName + "']";
                $(cardId).detach();
            },
            search: function (elem) {
                return {
                    onKeyUp: function () {
                        if (elem.value === "") return;
                        clearTimeout(timers[0]);
                        Author.search(elem).start();
                    },
                    start: function () {
                        timers[0] = setTimeout(function () { Author.search(elem).onChange() }, 500);
                    },
                    onChange: function () {
                        $.ajax({
                            type: 'POST',
                            url: '/Author/Search?character=' + elem.value,
                            success: function (data) {
                                $("#" + add + searchRes).html(data);
                            }
                        });
                    }
                }
            },
            searchResult: function () {
                return {
                    append: function (elem, id) {
                        let selector = "#AuthorItem_" + id;
                        if (elem.checked) {
                            let tr = $(selector).clone();
                            $("#" + select + searchRes).append(tr);
                        }
                        else {
                            $(`[name='${elem.name}']`).attr("checked", false);
                            $(`#${select + searchRes} ${selector}`).detach();
                            // данные полученные при поиске
                            $(`#searchResult ${selector}`).detach();
                            // исходные данные при наличии модели
                            $(`#getResult ${selector}`).detach();
                        }
                    },
                    serialize: function () {
                        var searchResult = $("#searchResult").html($(`#${select + searchRes} tr`).clone());
                        let weight = "<input class='form-control' id='Author_00__Weight' data-val='True' name='Author[00].Weight' placeHolder='Вес' type='text' value='' />";
                        searchResult.find("tr:has(td)").append(`<td>${weight}</td>`);
                        showWeight(Publication.volumeShow);
                    }
                }
            }
        };
    }();



    function showWeight(show) {
        let allWeigth = "[id$='Weight']";
        let title = "#WeightTitle";
        Requied(allWeigth, show);
        if (show) {
            $(allWeigth).show();
            $(title).show();
            return;
        }
        $(allWeigth).hide();
        $(title).hide();
    }

    function showVolume(show) {
        let div = "#VolumeCreate";
        let name = "#Publication_Volume";
        Publication.volumeShow = show;
        if (show) {
            // показать
            $(div).show();
            Requied(name, true);
            showWeight(true);
            return;
        }
        // скрыть
        $(div).hide()
        Requied(name, false);
        showWeight(false);
    }

    changePublicationForm = function (elem) {
        // формы публикации
        const electronicForm = "2";
        const audioForm = "3";

        var select = $(elem.target).find(":selected");
        if (select.length === 0) {
            return; // ничего не выбрано
        }
        var id = select.attr("value");
        showVolume(id === electronicForm || id === audioForm ? false : true);
    }

    Requied = function (elem, required) {
        $(elem).attr("data-val", required ? "True" : "False");
    }
    HasRequered = function (elem) {
        return $(elem).attr("data-val");
    }



    $(function () {
        $("select#Publication_PublicationForm").on('change', { elem: this }, changePublicationForm);
        
        let selectListLanguage = new language("Publication.text");
        $("#languages").html(selectListLanguage.items);
    });
</script>
